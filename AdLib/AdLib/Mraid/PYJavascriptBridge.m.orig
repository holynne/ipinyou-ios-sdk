//
//  PYJavascriptBridge.m
//  AdLib
//
//  Created by lide on 14-4-2.
//  Copyright (c) 2014å¹´ lide. All rights reserved.
//

#import "PYJavascriptBridge.h"
#import "UIColor-Expanded-Pinyou.h"

@interface PYJavascriptBridge ()

- (NSDictionary *)parametersFromJSCall:(NSString *)parameterString;
- (BOOL)processCommand:(NSString *)command
			parameters:(NSDictionary *)parameters
			forWebView:(UIWebView *)webView;
- (BOOL)processMraidEnabledCommand:(NSDictionary *)parameters
						forWebView:(UIWebView *)webView;
- (BOOL)processCloseCommand:(NSDictionary *)parameters
				 forWebView:(UIWebView *)webView;
- (BOOL)processExpandCommand:(NSDictionary *)parameters
				  forWebView:(UIWebView *)webView;
- (BOOL)processHideCommand:(NSDictionary *)parameters
				forWebView:(UIWebView *)webView;
- (BOOL)processServiceCommand:(NSDictionary *)parameters
				   forWebView:(UIWebView *)webView;
- (BOOL)processShowCommand:(NSDictionary *)parameters
				forWebView:(UIWebView *)webView;
- (BOOL)processOpenCommand:(NSDictionary *)parameters
				forWebView:(UIWebView *)webView;
- (BOOL)processOpenMapCommand:(NSDictionary *)parameters
                   forWebView:(UIWebView *)webView;
- (BOOL)processPlayAudioCommand:(NSDictionary *)parameters
                     forWebView:(UIWebView *)webView;
- (BOOL)processPlayVideoCommand:(NSDictionary *)parameters
                     forWebView:(UIWebView *)webView;
- (BOOL)processRequestCommand:(NSDictionary *)parameters
				   forWebView:(UIWebView *)webView;
- (BOOL)processCalendarCommand:(NSDictionary *)parameters
					forWebView:(UIWebView *)webView;
- (BOOL)processCameraCommand:(NSDictionary *)parameters
				  forWebView:(UIWebView *)webView;
- (BOOL)processEMailCommand:(NSDictionary *)parameters
				 forWebView:(UIWebView *)webView;
- (BOOL)processPhoneCommand:(NSDictionary *)parameters
				 forWebView:(UIWebView *)webView;
- (BOOL)processSMSCommand:(NSDictionary *)parameters
			   forWebView:(UIWebView *)webView;
- (BOOL)processAddAssetCommand:(NSDictionary *)parameters
					forWebView:(UIWebView *)webView;
- (BOOL)processRemoveAssetCommand:(NSDictionary *)parameters
					   forWebView:(UIWebView *)webView;
- (BOOL)processRemoveAllAssetsCommand:(NSDictionary *)parameters
						   forWebView:(UIWebView *)webView;

- (CGFloat)floatFromDictionary:(NSDictionary *)dictionary
						forKey:(NSString *)key;
- (int)intFromDictionary:(NSDictionary *)dictionary
                  forKey:(NSString *)key;
- (CGFloat)floatFromDictionary:(NSDictionary *)dictionary
						forKey:(NSString *)key
				   withDefault:(CGFloat)defaultValue;
- (NSString *)requiredStringFromDictionary:(NSDictionary *)dictionary
									forKey:(NSString *)key;
- (BOOL)booleanFromDictionary:(NSDictionary *)dictionary
					   forKey:(NSString *)key;

@end

@implementation PYJavascriptBridge

#pragma mark - Constants

NSString * const PYMraidProtocol = @"mraid://";

NSString * const PYMraidCommandMraidEnabled = @"mraidenabled";

NSString * const PYMraidCommandShow = @"show";
NSString * const PYMraidCommandHide = @"hide";
NSString * const PYMraidCommandClose = @"close";

NSString * const PYMraidCommandExpand = @"expand";

NSString * const PYMraidCommandAddAsset = @"addasset";
NSString * const PYMraidCommandRemoveAsset = @"removeasset";
NSString * const PYMraidCommandRemoveAllAssets = @"removeallassets";

NSString * const PYMraidCommandCalendar = @"calendar";
NSString * const PYMraidCommandCamera = @"camera";
NSString * const PYMraidCommandEMail = @"email";
NSString * const PYMraidCommandPhone = @"phone";
NSString * const PYMraidCommandSMS = @"sms";

NSString * const PYMraidCommandOpen = @"open";
NSString * const PYMraidCommandOpenMap = @"openmap";
NSString * const PYMraidCommandPlayAudio = @"playaudio";
NSString * const PYMraidCommandPlayVideo = @"playvideo";
NSString * const PYMraidCommandRequest = @"request";

NSString * const PYMraidCommandService = @"service";

const CGFloat kDefaultShakeIntensity = 1.5;

@synthesize delegate = _delegate;

#pragma mark Dynamic Properties

- (NSString *)networkStatus
{
	PinyouNetworkStatus ns = [[PinyouReachability reachabilityForInternetConnection] currentReachabilityStatus];
	switch ( ns )
	{
		case ReachableViaWWAN:
			return @"cell";
		case ReachableViaWiFi:
			return @"wifi";
	}
	return @"offline";
}

#pragma mark - private

- (BOOL)processMraidEnabledCommand:(NSDictionary *)parameters
						forWebView:(UIWebView *)webView
{
    if(_delegate && [_delegate respondsToSelector:@selector(adIsMraidEnabledForWebView:)])
    {
        [_delegate adIsMraidEnabledForWebView:webView];
    }
	return YES;
}

- (BOOL)processShowCommand:(NSDictionary *)parameters
				forWebView:(UIWebView *)webView
{
    if(_delegate && [_delegate respondsToSelector:@selector(showAd:)])
    {
        [_delegate showAd:webView];
    }
	return YES;
}

- (BOOL)processHideCommand:(NSDictionary *)parameters
				forWebView:(UIWebView *)webView
{
    if(_delegate && [_delegate respondsToSelector:@selector(hideAd:)])
    {
        [_delegate hideAd:webView];
    }
	return YES;
}

- (BOOL)processCloseCommand:(NSDictionary *)parameters
				 forWebView:(UIWebView *)webView
{
    if(_delegate && [_delegate respondsToSelector:@selector(closeAd:)])
    {
        [_delegate closeAd:webView];
    }
	return YES;
}

- (BOOL)processExpandCommand:(NSDictionary *)parameters
				  forWebView:(UIWebView *)webView
{
    NSLog(@"Processing EXPAND Command...");
	
	// account for status bar, if needed
	CGFloat yDelta = 0;
	UIApplication *app = [UIApplication sharedApplication];
	// Height and width must be swapped for landscape orientation
    if(!app.statusBarHidden)
	{
        if(app.statusBarFrame.size.height < app.statusBarFrame.size.width)
        {
            yDelta = app.statusBarFrame.size.height;
        }
        else
        {
            yDelta = app.statusBarFrame.size.width;
        }
	}
    
    // ok, to make it easy on the client, we don't require them to give us all
	// the values all the time.
	// basicallly we're going to take the current real frame information from
	// the ad (translated to window space coordinates) and set the final frame
	// to this information. Then for each data point we receive from the client,
	// we override the appropriate value. this allows the client to say things
	// like "using the current ad position, expand the ad's height to 300px"
	CGRect f = [_delegate getAdFrameInWindowCoordinates];
    
    // Get the current ad rectangle that is actually presented to the client, regardless of the rotation,
    // since the app keyWindow does not rotate.
    CGRect fNotRotated = [_delegate rectAccordingToOrientation:f];
    
	CGFloat x = fNotRotated.origin.x;
	CGFloat y = fNotRotated.origin.y;
	CGFloat w = fNotRotated.size.width;
	CGFloat h = fNotRotated.size.height;
    
    // now get the sizes as specified by the creative
	x = [self floatFromDictionary:parameters
						   forKey:@"x"
					  withDefault:x];
	y = [self floatFromDictionary:parameters
						   forKey:@"y"
					  withDefault:y];
	w = [self floatFromDictionary:parameters
						   forKey:@"w"
					  withDefault:w];
	h = [self floatFromDictionary:parameters
						   forKey:@"h"
					  withDefault:h];
	
	BOOL useBG = [self booleanFromDictionary:parameters
									  forKey:@"useBG"];
    
    UIColor *blockerColor = [UIColor blackColor];
	CGFloat bgOpacity = 0.20;
	if(useBG)
	{
		NSString *value = [parameters objectForKey:@"bgColor"];
		if(value != nil)
		{
			value = [value stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
			if(value.length > 0)
			{
				// we have what "should" be a color
				if([value hasPrefix:@"#"])
				{
					// hex color
					blockerColor = [UIColor colorWithName:[value substringFromIndex:1]];
				}
				else
				{
					// assume it's a named color
					blockerColor = [UIColor colorWithName:value];
				}
			}
		}
		bgOpacity = [self floatFromDictionary:parameters
									   forKey:@"bgOpacity"
								  withDefault:1.0];
	}
    
    NSString *urlString = [parameters valueForKey:@"url"];
	NSURL *url = [NSURL URLWithString:urlString];
	NSLog(@"Expanding to ( %f, %f ) ( %f x %f ) showing %@", x, y, w, h, url);
    // The newFrame is the not rotated frame. The callee has to take the current rotation into consideration.
	CGRect newFrame = CGRectMake(x, (y + yDelta), w, h);
	BOOL allowOrientation = [self booleanFromDictionary:parameters forKey:@"lockOrientation"];

    if(_delegate && [_delegate respondsToSelector:@selector(expandTo:withURL:inWebView:blockingColor:blockingOpacity:lockOrientation:)])
    {
        [_delegate expandTo:newFrame
                    withURL:url
                  inWebView:webView
              blockingColor:blockerColor
            blockingOpacity:bgOpacity
            lockOrientation:allowOrientation];
    }
    
	return YES;
}

- (BOOL)processAddAssetCommand:(NSDictionary *)parameters
					forWebView:(UIWebView *)webView
{
    return YES;
}

- (BOOL)processRemoveAssetCommand:(NSDictionary *)parameters
					   forWebView:(UIWebView *)webView
{
	return YES;
}

- (BOOL)processRemoveAllAssetsCommand:(NSDictionary *)parameters
						   forWebView:(UIWebView *)webView
{
	return YES;
}

- (BOOL)processOpenCommand:(NSDictionary *)parameters
				forWebView:(UIWebView *)webView
{
    NSString *url = [self requiredStringFromDictionary:parameters
												forKey:@"url"];
	BOOL back = [self booleanFromDictionary:parameters
									 forKey:@"back"];
	BOOL forward = [self booleanFromDictionary:parameters
										forKey:@"forward"];
	BOOL refresh = [self booleanFromDictionary:parameters
										forKey:@"refresh"];
    
    if(_delegate && [_delegate respondsToSelector:@selector(openBrowser:withUrlString:enableBack:enableForward:enableRefresh:)])
    {
        [_delegate openBrowser:webView
                 withUrlString:url
                    enableBack:back
                 enableForward:forward
                 enableRefresh:refresh];
    }
    
	return YES;
}

- (BOOL)processOpenMapCommand:(NSDictionary *)parameters
                   forWebView:(UIWebView *)webView
{
    NSString *url = [self requiredStringFromDictionary:parameters
												forKey:@"url"];
	BOOL fullscreen = [self booleanFromDictionary:parameters
                                           forKey:@"fullscreen"];
    
    if(_delegate && [_delegate respondsToSelector:@selector(openMap:withUrlString:andFullScreen:)])
    {
        [_delegate openMap:webView
             withUrlString:url
             andFullScreen:fullscreen];
    }
    
	return YES;
}

- (BOOL)processPlayAudioCommand:(NSDictionary *)parameters
                     forWebView:(UIWebView *)webView
{
    NSString *url = [self requiredStringFromDictionary:parameters
												forKey:@"url"];
    
	BOOL autoplay = [self booleanFromDictionary:parameters
                                         forKey:@"autoplay"];
    
    BOOL controls = [self booleanFromDictionary:parameters
                                         forKey:@"controls"];
    
    BOOL loop = [self booleanFromDictionary:parameters
                                     forKey:@"loop"];
    
    
    BOOL position = [self booleanFromDictionary:parameters
                                         forKey:@"position"];
    
    NSString* startStyle = [self requiredStringFromDictionary:parameters
                                                       forKey:@"startStyle"];
    
    NSString* stopStyle = [self requiredStringFromDictionary:parameters
                                                      forKey:@"stopStyle"];
    
    if(_delegate && [_delegate respondsToSelector:@selector(playAudio:withUrlString:autoPlay:controls:loop:position:startStyle:stopStyle:)])
    {
        [_delegate playAudio:webView
               withUrlString:url
                    autoPlay:autoplay
                    controls:controls
                        loop:loop
                    position:position
                  startStyle:startStyle
                   stopStyle:stopStyle];
    }
    
	return YES;
}

- (BOOL)processPlayVideoCommand:(NSDictionary *)parameters
                     forWebView:(UIWebView *)webView
{
    NSString *url = [self requiredStringFromDictionary:parameters
												forKey:@"url"];
    
    BOOL mutedAudio = [self booleanFromDictionary:parameters
                                           forKey:@"audioMuted"];
    
	BOOL autoplay = [self booleanFromDictionary:parameters
                                         forKey:@"autoplay"];
    
    BOOL controls = [self booleanFromDictionary:parameters
                                         forKey:@"controls"];
    
    BOOL loop = [self booleanFromDictionary:parameters
                                     forKey:@"loop"];
    
    
    int position_top = [self intFromDictionary:parameters
                                        forKey:@"position_top"];
    
    int position_left = [self intFromDictionary:parameters
                                         forKey:@"position_left"];
    
    int position_width = [self intFromDictionary:parameters
                                          forKey:@"position_width"];
    
    int position_height = [self intFromDictionary:parameters
                                           forKey:@"position_height"];
    
    NSString* startStyle = [self requiredStringFromDictionary:parameters
                                                       forKey:@"startStyle"];
    
    NSString* stopStyle = [self requiredStringFromDictionary:parameters
                                                      forKey:@"stopStyle"];
    
    if(_delegate && [_delegate respondsToSelector:@selector(playVideo:withUrlString:audioMuted:autoPlay:controls:loop:position:startStyle:stopStyle:)])
    {
        [_delegate playVideo:webView
               withUrlString:url
                  audioMuted:mutedAudio
                    autoPlay:autoplay
                    controls:controls
                        loop:loop
                    position:(int[4]){position_top, position_left, position_width, position_height}
                  startStyle:startStyle
                   stopStyle:stopStyle];
    }
    
	return YES;
}

- (BOOL)processRequestCommand:(NSDictionary *)parameters
				   forWebView:(UIWebView *)webView
{
	return YES;
}

- (BOOL)processCalendarCommand:(NSDictionary *)parameters
					forWebView:(UIWebView *)webView
{
    NSString *dateString = [self requiredStringFromDictionary:parameters
													   forKey:@"date"];
	NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
	[formatter setDateFormat:@"yyyyMMddHHmm"];
	NSDate *date = [formatter dateFromString:dateString];
	
	NSString *title = [self requiredStringFromDictionary:parameters
												  forKey:@"title"];
	NSString *body = [self requiredStringFromDictionary:parameters
												 forKey:@"body"];
	NSLog(@"Processing CALENDAR Command for %@ / %@ / %@", date, title, body);
    
	if((date != nil) && (title != nil) && (body != nil))
	{
        if(_delegate && [_delegate respondsToSelector:@selector(addEventToCalenderForDate:withTitle:withBody:)])
        {
            [_delegate addEventToCalenderForDate:date
                                       withTitle:title
                                        withBody:body];
        }
	}
	[formatter release];
    
	return YES;
}

- (BOOL)processCameraCommand:(NSDictionary *)parameters
				  forWebView:(UIWebView *)webView
{
	return YES;
}

- (BOOL)processEMailCommand:(NSDictionary *)parameters
				 forWebView:(UIWebView *)webView
{
    NSString *to = [self requiredStringFromDictionary:parameters
											   forKey:@"to"];
	NSString *subject = [self requiredStringFromDictionary:parameters
													forKey:@"subject"];
	NSString *body = [self requiredStringFromDictionary:parameters
												 forKey:@"body"];
	BOOL html = [self booleanFromDictionary:parameters
									 forKey:@"html"];
	if((body != nil) && (to != nil) && (subject != nil))
	{
        if(_delegate && [_delegate respondsToSelector:@selector(sendEMailTo:withSubject:withBody:isHTML:)])
        {
            [_delegate sendEMailTo:to
                       withSubject:subject
                          withBody:body
                            isHTML:html];
        }
    }
    
	return YES;
}

- (BOOL)processPhoneCommand:(NSDictionary *)parameters
				 forWebView:(UIWebView *)webView
{
    NSString *phoneNumber = [self requiredStringFromDictionary:parameters
														forKey:@"number"];
    
    if((phoneNumber != nil) && (phoneNumber.length > 0))
	{
        if(_delegate && [_delegate respondsToSelector:@selector(placeCallTo:)])
        {
            [_delegate placeCallTo:phoneNumber];
        }
    }
    
	return YES;
}
- (BOOL)processSMSCommand:(NSDictionary *)parameters
			   forWebView:(UIWebView *)webView
{
    NSString *to = [self requiredStringFromDictionary:parameters
											   forKey:@"to"];
	NSString *body = [self requiredStringFromDictionary:parameters
												 forKey:@"body"];
    
    if((body != nil) && (to != nil))
	{
        if(_delegate && [_delegate respondsToSelector:@selector(sendSMSTo:withBody:)])
        {
            [_delegate sendSMSTo:to
                        withBody:body];
        }
    }
    
	return YES;
}

- (BOOL)processServiceCommand:(NSDictionary *)parameters
				   forWebView:(UIWebView *)webView
{
    NSString *eventName = [parameters valueForKey:@"name"];
	NSString *desiredState = [parameters valueForKey:@"enabled"];
	BOOL enabled = ([@"Y" isEqualToString:desiredState]);
    
    if([@"tiltChange" isEqualToString:eventName]) // accelerometer
	{
        if(enabled)
		{
            _accelerometerEnableCount++;
            if(_accelerometer == nil)
            {
                _accelerometer = [[UIAccelerometer sharedAccelerometer] retain];
                _accelerometer.updateInterval = .1;
                _accelerometer.delegate = self;
            }
            _processAccelerometer = YES;
        }
		else
		{
            if(_accelerometerEnableCount > 0)
            {
                _accelerometerEnableCount--;
                if(_accelerometerEnableCount == 0)
                {
                    _accelerometer.delegate = nil;
                    [_accelerometer release];
                    _accelerometer = nil;
                }
            }
            _processAccelerometer = NO;
        }
    }
    else if([@"shake" isEqualToString:eventName]) // shake
    {
        if(enabled)
        {
            _accelerometerEnableCount++;
            if(_accelerometer == nil)
            {
                _accelerometer = [[UIAccelerometer sharedAccelerometer] retain];
                _accelerometer.updateInterval = .1;
                _accelerometer.delegate = self;
            }
            _processShake = YES;
        }
        else
        {
            if(_accelerometerEnableCount > 0)
            {
                _accelerometerEnableCount--;
                if(_accelerometerEnableCount == 0)
                {
                    _accelerometer.delegate = nil;
                    [_accelerometer release];
                    _accelerometer = nil;
                }
            }
            _processShake = NO;
        }
    }
    else if([@"headingChange" isEqualToString:eventName]) //compass
    {
        if([CLLocationManager headingAvailable])
        {
            if(enabled)
            {
                _compassEnableCount++;
                if(_compassEnableCount == 1)
                {
                    [_locationManager startUpdatingHeading];
                }
            }
            else
            {
                if(_compassEnableCount > 0)
                {
                    _compassEnableCount--;
                    if(_compassEnableCount == 0)
                    {
                        [_locationManager stopUpdatingHeading];
                    }
                }
            }
        }
    }
    else if([@"locationChange" isEqualToString:eventName]) // Location Based Services
    {
        if([CLLocationManager locationServicesEnabled])
        {
            if(enabled)
            {
                _locationEnableCount++;
                if(_locationEnableCount == 1)
                {
                    [_locationManager startUpdatingLocation];
                }
            }
            else
            {
                if(_locationEnableCount > 0)
                {
                    _locationEnableCount--;
                    if(_locationEnableCount == 0)
                    {
                        [_locationManager stopUpdatingLocation];
                    }
                }
            }
        }
    }
    else if([@"rotationChange" isEqualToString:eventName]) // gyroscope
    {
        if(_motionManager != nil)
        {
            if(enabled)
            {
                _gyroscopeEnableCount++;
                if(_timer == nil)
                {
                    _timer = [NSTimer scheduledTimerWithTimeInterval:0.1
                                                              target:self
                                                            selector:@selector(timerFired)
                                                            userInfo:nil
                                                             repeats:YES];
                    [_motionManager startGyroUpdates];
                }
            }
            else
            {
                if(_gyroscopeEnableCount > 0)
                {
                    _gyroscopeEnableCount--;
                    if(_gyroscopeEnableCount == 0)
                    {
                        [_motionManager stopGyroUpdates];
                    }
                }
            }
        }
    }
    
	return YES;
}

#pragma mark - Utility

- (CGFloat)floatFromDictionary:(NSDictionary *)dictionary
						forKey:(NSString *)key
{
	return [self floatFromDictionary:dictionary
							  forKey:key
						 withDefault:0.0];
}

- (int)intFromDictionary:(NSDictionary *)dictionary
                  forKey:(NSString *)key
{
	NSString *stringValue = [dictionary valueForKey:key];
	if ( stringValue == nil )
	{
		return -1;
	}
	int value = [stringValue intValue];
	return value;
}

- (CGFloat)floatFromDictionary:(NSDictionary *)dictionary
						forKey:(NSString *)key
				   withDefault:(CGFloat)defaultValue
{
	NSString *stringValue = [dictionary valueForKey:key];
	if ( stringValue == nil )
	{
		return defaultValue;
	}
	CGFloat value = [stringValue floatValue];
	return value;
}

- (NSString *)requiredStringFromDictionary:(NSDictionary *)dictionary
									forKey:(NSString *)key
{
	NSString *value = [dictionary objectForKey:key];
	if ( value == nil || [value isEqual:[NSNull null]] )
	{
		// error
		NSLog( @"Missing required parameter: %@", key );
		return nil;
	}
	value = [value stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
	NSLog(@"Value is \"%@\"", value);
	if ( value.length == 0 || [value isEqual:[NSNull null]] || value == nil)
	{
		NSLog( @"Missing required parameter: %@", key );
		return nil;
	}
	return value;
}

- (BOOL)booleanFromDictionary:(NSDictionary *)dictionary
					   forKey:(NSString *)key
{
	NSString *stringValue = [dictionary valueForKey:key];
	BOOL value = [@"Y" isEqualToString:stringValue] || [@"y" isEqualToString:stringValue];
	return value;
}

#pragma mark - super

- (id)init
{
    self = [super init];
    if(self != nil)
    {
        _locationManager = [[CLLocationManager alloc] init];
        _locationManager.delegate = self;
        _locationManager.desiredAccuracy = kCLLocationAccuracyBest;
        
        _shakeIntensity = kDefaultShakeIntensity;
        
        _motionManager = [[CMMotionManager alloc] init];
        
        // make sure to register for the events that we care about
		NSNotificationCenter *notificationCenter = [NSNotificationCenter defaultCenter];
		[notificationCenter addObserver:self
							   selector:@selector(orientationChanged:)
								   name:UIDeviceOrientationDidChangeNotification
								 object:nil];
		[notificationCenter addObserver:self
							   selector:@selector(keyboardWillShow:)
								   name:UIKeyboardWillShowNotification
								 object:nil];
		[notificationCenter addObserver:self
							   selector:@selector(keyboardWillHide:)
								   name:UIKeyboardWillHideNotification
								 object:nil];
		[notificationCenter addObserver:self
							   selector:@selector(handleReachabilityChangedNotification:)
								   name:PinyoukReachabilityChangedNotification
								 object:nil];
        
        [[PinyouReachability reachabilityForInternetConnection] startNotifier];
    }
    
    return self;
}

- (void)dealloc
{
    [[NSNotificationCenter defaultCenter] removeObserver:self];
    [[PinyouReachability reachabilityForInternetConnection] stopNotifier];
    
	[_timer invalidate];
    _timer = nil;
    
	_delegate = nil;
    
	_accelerometer.delegate = nil;
    [_accelerometer release];
    _accelerometer = nil;
    
    [_locationManager stopUpdatingHeading];
    [_locationManager stopUpdatingLocation];
    _locationManager.delegate = nil;
	[_locationManager release];
    _locationManager = nil;
    
	[_motionManager stopGyroUpdates];
    [_motionManager release];
    _motionManager = nil;
	
    [super dealloc];
}

#pragma mark - public

- (BOOL)processURL:(NSURL *)url forWebView:(UIWebView *)webView
{
    NSString *workingUrl = [url absoluteString];
	if([workingUrl hasPrefix:PYMraidProtocol])
	{
        // the URL is intended for the bridge, so process it
		NSString *workingCall = [workingUrl substringFromIndex:PYMraidProtocol.length];
		
		// get the command
		NSRange r = [workingCall rangeOfString:@"?"];
        if ( r.location == NSNotFound )
		{
			// just a command
			return [self processCommand:workingCall
							 parameters:nil
							 forWebView:webView];
		}
        NSString *command = [[workingCall substringToIndex:r.location] lowercaseString];
		NSString *parameterValues = [workingCall substringFromIndex:( r.location + 1 )];
		NSDictionary *parameters = [self parametersFromJSCall:parameterValues];
		NSLog( @"Mraid Command: %@, %@", command, parameters );
		
		// let the callee know
		return [self processCommand:command
						 parameters:parameters
						 forWebView:webView];
    }
    
    // not intended for the bridge
	return NO;
}

// restore to default state
- (void)restoreServicesToDefaultState
{
	// accelerometer monitoring
	if(_accelerometerEnableCount > 0)
	{
		_accelerometer.delegate = nil;
        [_accelerometer release];
        _accelerometer = nil;
		_accelerometerEnableCount = 0;
	}
	
	// compass monitoring
	if(_compassEnableCount > 0)
	{
		[_locationManager stopUpdatingHeading];
		_compassEnableCount = 0;
	}
	
	// gyroscope monitoring
	if(_gyroscopeEnableCount > 0)
	{
		[_timer invalidate];
        _timer = nil;
		[_motionManager stopGyroUpdates];
		_gyroscopeEnableCount = 0;
	}
	
	// location monitoring
	if(_locationEnableCount > 0)
	{
		[_locationManager stopUpdatingLocation];
		_locationEnableCount = 0;
	}
}

- (NSDictionary *)parametersFromJSCall:(NSString *)parameterString
{
    NSMutableDictionary *parameters = [NSMutableDictionary dictionary];
	
	// find the start of our parameters
	NSArray *parameterList = [parameterString componentsSeparatedByString:@"&"];
	for ( NSString *parameterEntry in parameterList )
	{
		NSArray *kvp = [parameterEntry componentsSeparatedByString:@"="];
		NSString *key = [kvp objectAtIndex:0];
		NSString *encodedValue = [kvp objectAtIndex:1];
		NSString *value = [encodedValue stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding];;
		[parameters setObject:value forKey:key];
	}
	
	return parameters;
}

- (BOOL)processCommand:(NSString *)command
			parameters:(NSDictionary *)parameters
			forWebView:(UIWebView *)webView
{
    BOOL processed = NO;
	if([command isEqualToString:PYMraidCommandMraidEnabled])
	{
		// process close
		processed = [self processMraidEnabledCommand:parameters
										  forWebView:webView];
	}
	else if([command isEqualToString:PYMraidCommandClose])
	{
		// process close
		processed = [self processCloseCommand:parameters
								   forWebView:webView];
	}
	else if([command isEqualToString:PYMraidCommandExpand])
	{
		// process hide
		processed = [self processExpandCommand:parameters
									forWebView:webView];
	}
	else if([command isEqualToString:PYMraidCommandHide])
	{
		// process hide
		processed = [self processHideCommand:parameters
                                  forWebView:webView];
	}
	else if([command isEqualToString:PYMraidCommandService])
	{
		// process service
		processed = [self processServiceCommand:parameters
                                     forWebView:webView];
	}
	else if([command isEqualToString:PYMraidCommandShow])
	{
		// process show
		processed = [self processShowCommand:parameters
								  forWebView:webView];
	}
	else if([command isEqualToString:PYMraidCommandAddAsset])
	{
		// process show
		processed = [self processAddAssetCommand:parameters
									  forWebView:webView];
	}
	else if([command isEqualToString:PYMraidCommandRemoveAsset])
	{
		// process show
		processed = [self processRemoveAssetCommand:parameters
										 forWebView:webView];
	}
	else if([command isEqualToString:PYMraidCommandRemoveAllAssets])
	{
		// process show
		processed = [self processRemoveAllAssetsCommand:parameters
											 forWebView:webView];
	}
	else if([command isEqualToString:PYMraidCommandOpen])
	{
		// process show
		processed = [self processOpenCommand:parameters
								  forWebView:webView];
	}
    else if([command isEqualToString:PYMraidCommandOpenMap])
	{
		// process show
		processed = [self processOpenMapCommand:parameters
                                     forWebView:webView];
	}
    else if([command isEqualToString:PYMraidCommandPlayAudio])
	{
		// process show
		processed = [self processPlayAudioCommand:parameters
                                       forWebView:webView];
	}
    else if([command isEqualToString:PYMraidCommandPlayVideo])
	{
		// process show
		processed = [self processPlayVideoCommand:parameters
                                       forWebView:webView];
	}
    else if([command isEqualToString:PYMraidCommandRequest])
	{
		// process show
		processed = [self processRequestCommand:parameters
									 forWebView:webView];
	}
	else if([command isEqualToString:PYMraidCommandCalendar])
	{
		// process show
		processed = [self processCalendarCommand:parameters
									  forWebView:webView];
	}
	else if([command isEqualToString:PYMraidCommandCamera])
	{
		// process show
		processed = [self processCameraCommand:parameters
									forWebView:webView];
	}
	else if([command isEqualToString:PYMraidCommandEMail])
	{
		// process show
		processed = [self processEMailCommand:parameters
								   forWebView:webView];
	}
	else if([command isEqualToString:PYMraidCommandPhone])
	{
		// process show
		processed = [self processPhoneCommand:parameters
								   forWebView:webView];
	}
	else if([command isEqualToString:PYMraidCommandSMS])
	{
		// process show
		processed = [self processSMSCommand:parameters
								 forWebView:webView];
	}
    
    if(!processed)
	{
		NSLog(@"Unknown Command: %@", command);
	}
    
	// notify JS that we've completed the last request
    if([_delegate respondsToSelector:@selector(usingWebView:executeJavascript:)])
    {
        [_delegate usingWebView:webView
              executeJavascript:@"mraidbridge.nativeCallComplete( '%@' );", command];
    }
    
	return processed;
}

#pragma mark - Notification Center Dispatch Methods

- (CGSize)screenSizeForOrientation:(UIDeviceOrientation)orientation
{
	CGSize size;
	UIScreen *screen = [UIScreen mainScreen];
	CGSize screenSize = screen.bounds.size;
	if ( UIDeviceOrientationIsLandscape( orientation ) )
	{
		// Landscape Orientation, reverse size values
		size.width = screenSize.height;
		size.height = screenSize.width;
	}
	else
	{
		// portrait orientation, use normal size values
		size.width = screenSize.width;
		size.height = screenSize.height;
	}
	return size;
}

- (void)orientationChanged:(NSNotification *)notification
{
	UIDevice *device = [UIDevice currentDevice];
    UIDeviceOrientation orientation = device.orientation;
    
    NSInteger orientationAngle = -1;
	switch ( orientation )
	{
		case UIDeviceOrientationPortrait:
			orientationAngle = 0;
			break;
		case UIDeviceOrientationPortraitUpsideDown:
			orientationAngle = 180;
			break;
		case UIDeviceOrientationLandscapeLeft:
			orientationAngle = 270;
			break;
		case UIDeviceOrientationLandscapeRight:
			orientationAngle = 90;
			break;
		default:
			// the device is likely flat
			// since we have no idea what the orientation is
			// don't change it
			return;
	}
	CGSize screenSize = [self screenSizeForOrientation:orientation];
	[_delegate usingWebView:_delegate.webView
          executeJavascript:@"mraidbridge.fireChangeEvent( {screenSize: { width: %f, height: %f }, orientation: %i } );",
     screenSize.width, screenSize.height, orientationAngle];
    [_delegate rotateExpandedWindowsToCurrentOrientation];
}


- (void)keyboardWillShow:(NSNotification *)notification
{
	[_delegate usingWebView:_delegate.webView
          executeJavascript:@"mraidbridge.fireChangeEvent( { keyboardState: true } );"];
}


- (void)keyboardWillHide:(NSNotification *)notification
{
	[_delegate usingWebView:_delegate.webView
          executeJavascript:@"mraidbridge.fireChangeEvent( { keyboardState: false } );"];
}


- (void)handleReachabilityChangedNotification:(NSNotification *)notification
{
	[_delegate usingWebView:_delegate.webView
          executeJavascript:@"mraidbridge.fireChangeEvent( { network: '%@' } );", [self networkStatus]];
}

#pragma mark Accelerometer Delegete

- (void)accelerometer:(UIAccelerometer *)accelerometer
		didAccelerate:(UIAcceleration *)acceleration
{
	static BOOL processingShake = NO;
	BOOL shake = NO;
	
	// send accelerometer data if needed
	if(_processAccelerometer)
	{
	    NSLog(@"Acceleration Data Available: %f, %f, %f", acceleration.x, acceleration.y, acceleration.z);
        
        if(_delegate && [_delegate respondsToSelector:@selector(usingWebView:executeJavascript:)])
        {
            [_delegate usingWebView:[_delegate webView]
                  executeJavascript:@"mraidbridge.fireChangeEvent( { tilt: { x: %f, y: %f, z: %f } } );", acceleration.x, acceleration.y, acceleration.z];
        }
	}
	
	// deal with shakes
	if(_processShake)
	{
        if(processingShake)
        {
            return;
        }
        if((acceleration.x > _shakeIntensity) || (acceleration.x < (-1 * _shakeIntensity)))
        {
            shake = YES;
        }
        if((acceleration.x > _shakeIntensity) || (acceleration.x < (-1 * _shakeIntensity)))
        {
            shake = YES;
        }
        if((acceleration.x > _shakeIntensity) || (acceleration.x < (-1 * _shakeIntensity)))
        {
            shake = YES;
        }
        
        if(shake)
        {
            // Shake detected
            NSLog(@"Shake Detected");
            
            if(_delegate && [_delegate respondsToSelector:@selector(usingWebView:executeJavascript:)])
            {
                [_delegate usingWebView:[_delegate webView]
                      executeJavascript:@"mraidbridge.fireShakeEvent();"];
            }
        }
        processingShake = NO;
	}
}

#pragma mark - Timer Handler

- (void)timerFired
{
	// get the current gyroscope data
	CMGyroData *data = _motionManager.gyroData;
	NSLog(@"Gyroscope Data Available: %f, %f, %f", data.rotationRate.x, data.rotationRate.y, data.rotationRate.z);
    
    if(_delegate && [_delegate respondsToSelector:@selector(usingWebView:executeJavascript:)])
    {
        [_delegate usingWebView:[_delegate webView]
              executeJavascript:@"mraidbridge.fireChangeEvent( { rotation: { x: %f, y: %f, z: %f } } );", data.rotationRate.x, data.rotationRate.y, data.rotationRate.z];
    }
}

#pragma mark - Location Manager Delegate (including Compass)

- (void)locationManager:(CLLocationManager *)manager
	didUpdateToLocation:(CLLocation *)newLocation
		   fromLocation:(CLLocation *)oldLocation
{
	NSLog(@"Location Data Available: (%f, %f ) acc: %f", newLocation.coordinate.latitude, newLocation.coordinate.longitude, newLocation.horizontalAccuracy);
    
    if(_delegate && [_delegate respondsToSelector:@selector(usingWebView:executeJavascript:)])
    {
        [_delegate usingWebView:[_delegate webView]
              executeJavascript:@"mraidbridge.fireChangeEvent( { location: { lat: %f, lon: %f, acc: %f } } );", newLocation.coordinate.latitude, newLocation.coordinate.longitude, newLocation.horizontalAccuracy];
    }
}

- (void)locationManager:(CLLocationManager *)manager
	   didFailWithError:(NSError *)error
{
    
}

- (BOOL)locationManagerShouldDisplayHeadingCalibration:(CLLocationManager *)manager
{
	// TODO: We may want to show a calibration screen based on the accuracy of
	// the heading
	return NO;
}

- (void)locationManager:(CLLocationManager *)manager
	   didUpdateHeading:(CLHeading *)newHeading
{
	NSLog( @"Heading Data Available: %f", newHeading.trueHeading );
	NSDateFormatter *formatter = [[[NSDateFormatter alloc] init] autorelease];
	[formatter setTimeStyle:NSDateFormatterFullStyle];
	[formatter setDateStyle:NSDateFormatterFullStyle];
    
    if(_delegate && [_delegate respondsToSelector:@selector(usingWebView:executeJavascript:)])
    {
        [_delegate usingWebView:[_delegate webView]
              executeJavascript:@"mraidbridge.fireChangeEvent( { heading: %f } );", newHeading.trueHeading];
    }
}

- (void)locationManager:(CLLocationManager *)manager
		 didEnterRegion:(CLRegion *)region
{
    
}

- (void)locationManager:(CLLocationManager *)manager
		  didExitRegion:(CLRegion *)region
{
    
}

- (void)locationManager:(CLLocationManager *)manager
monitoringDidFailForRegion:(CLRegion *)region
			  withError:(NSError *)error
{
    
}

@end
